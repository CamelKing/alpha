import { expect, should } from 'chai';
import { round, roundDown, roundUp } from '../src/alpha';

import { FnAny } from '../src/constants';
import { _testSuites } from './_testSuites';

should();

const suiteText: string = 'round() & derivative functions';

const tests: object = {};
const inputs: object = {};
const answers: object = {};

const funcs: FnAny[] = [
  round,
  roundUp,
  roundDown,
];

tests['round'] = [
  'round +ve number < x.5 @ default precision',
  'round +ve number at x.5 @ default precision',
  'round +ve integer @ default precision',
  'round -ve number less than x.5 @ default precision',
  'round -ve number at x.5 @ default precision',
  'round -ve integer @ default precision',
  'round +ve number @ precision 1',
  'round +ve number @ precision 2',
  'round +ve number @ precision 5',
  'round -ve number @ precision 1',
  'round -ve number @ precision 2',
  'round -ve number @ precision 5',
  'round +ve number @ precision -1',
  'round +ve number @ precision -3',
  'round +ve number @ precision -5',
  'round +ve number @ precision -10',
  'round -ve number @ precision -1',
  'round -ve number @ precision -3',
  'round -ve number @ precision -5',
  'round -ve number @ precision -10',
  'round +ve numeric string @ default precision',
  'round +ve numeric string @ precision 2',
  'round +ve numeric string @ precision -2',
  'round -ve numeric string @ default precision',
  'round -ve numeric string @ precision 2',
  'round -ve numeric string @ precision -2',
  'round +ve scientific notation @ default precision',
  'round +ve scientific notation @ precision 2',
  'round +ve scientific notation @ precision -2',
  'round -ve scientific notation @ default precision',
  'round -ve scientific notation @ precision 2',
  'round -ve scientific notation @ precision -2',
  'round function returning +ve number @ default precision',
  'round function returning -ve number @ default precision',
  'round function returning +ve numeric string @ default precision',
  'round function returning -ve numeric string @ default precision',
  'round function returning +ve scietific notation @ default precision',
  'round function returning -ve scietific notation @ default precision',
  'round factory for function returning +ve number @ default precision',
  'round factory function returning -ve number @ default precision',
  'return 0 for empty string @ default precision',
  'return 0 for empty string @ precision 2',
  'return 0 for empty string @ precision -2',
  'return 0 for non numeric string @ default precision',
  'return 0 for non numeric string @ precision 2',
  'return 0 for non numeric string @ precision -2',
  'return NaN for empty array @ default precision',
  'return NaN for single element array @ default precision',
  'return NaN for multi elements array @ default precision',
  'return NaN for empty object @ default precision',
  'return NaN for single property object @ default precision',
  'return NaN for multi properties object @ default precision',
  'return NaN for true boolean @ default precision',
  'return NaN for false boolean @ default precision',
  'return NaN for any Promises @ default precision',
  'return NaN for any Symbol @ default precision',
  'return NaN for Undefined @ default precision',
  'return NaN for Null @ default precision',
  'return NaN for NaN @ default precision',
];

tests['roundUp'] = tests['round'];
tests['roundUp'] = tests['round'].map((text: string) =>
  text.replace(/round/, 'round up'));
tests['roundDown'] = tests['round'].map((text: string) =>
  text.replace(/round/, 'round down'));

inputs['round'] = [
  [123.499999999999],
  [123.5],
  [123],
  [-123.499999999999],
  [-123.5],
  [-123],
  [123.456789, 1],
  [123.456789, 2],
  [123.456789, 5],
  [-123.456789, 1],
  [-123.456789, 2],
  [-123.456789, 5],
  [123.456789, -1],
  [123.456789, -3],
  [123.456789, -5],
  [123.456789, -10],
  [-123.456789, -1],
  [-123.456789, -3],
  [-123.456789, -5],
  [-123.456789, -10],
  ['123.456789'],
  ['123.456789', +2],
  ['123.456789', -2],
  ['-123.456789'],
  ['-123.456789', +2],
  ['-123.456789', -2],
  ['1.23456E2'],
  ['1.23456E2', 2],
  ['1.23456E2', -2],
  ['-1.23456E2'],
  ['-1.23456E2', 2],
  ['-1.23456E2', -2],
  [() => (123.456 + 456.789)],
  [() => (-123.456 - 456.789)],
  [() => ('' + (123.456 + 456.789))],
  [() => ('-' + (123.456 + 456.789))],
  [() => ('' + (123.456E2))],
  [() => ('-' + (123.456E2))],
  [() => () => ('' + (123.456 + 456.789))],
  [() => () => ('-' + (123.456 + 456.789))],
  [''],
  ['', 2],
  ['', -2],
  ['hello world'],
  ['hello world', 2],
  ['hello world', -2],
  [[]],
  [[1]],
  [[1, 2, 3, 4]],
  [{}],
  [{ a: 1 }],
  [{ a: 1, b: 2 }],
  [true],
  [false],
  [Promise.resolve(123.456)],
  [Symbol()],
  [undefined],
  [null],
  [NaN],
];
inputs['roundUp'] = inputs['round'];
inputs['roundDown'] = inputs['round'];

answers['round'] = [
  123,
  124,
  123,
  -123,
  -124,
  -123,
  120,
  100,
  0,
  -120,
  -100,
  0,
  123.5,
  123.457,
  123.45679,
  123.456789,
  -123.5,
  -123.457,
  -123.45679,
  -123.456789,
  123,
  100,
  123.46,
  -123,
  -100,
  -123.46,
  123,
  100,
  123.46,
  -123,
  -100,
  -123.46,
  580,
  -580,
  580,
  -580,
  12346,
  -12346,
  580,
  -580,
  0, 0, 0,
  NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,
  NaN, NaN, NaN, NaN, NaN, NaN,
];

answers['roundUp'] = [
  124,
  124,
  123,
  -124,
  -124,
  -123,
  130,
  200,
  1e+5,
  -130,
  -200,
  -1e+5,
  123.5,
  123.457,
  123.45679,
  123.456789,
  -123.5,
  -123.457,
  -123.45679,
  -123.456789,
  124,
  200,
  123.46,
  -124,
  -200,
  -123.46,
  124,
  200,
  123.46,
  -124,
  -200,
  -123.46,
  581,
  -581,
  581,
  -581,
  12346,
  -12346,
  581,
  -581,
  0, 0, 0,
  NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,
  NaN, NaN, NaN, NaN, NaN, NaN,
];

answers['roundDown'] = [
  123,
  123,
  123,
  -123,
  -123,
  -123,
  120,
  100,
  0,
  -120,
  -100,
  0,
  123.4,
  123.456,
  123.45678,
  123.456789,
  -123.4,
  -123.456,
  -123.45678,
  -123.456789,
  123,
  100,
  123.45,
  -123,
  -100,
  -123.45,
  123,
  100,
  123.45,
  -123,
  -100,
  -123.45,
  580,
  -580,
  580,
  -580,
  12345,
  -12345,
  580,
  -580,
  0, 0, 0,
  NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN,
  NaN, NaN, NaN, NaN, NaN, NaN,
];

_testSuites(funcs, tests, inputs, answers, suiteText, __filename);
